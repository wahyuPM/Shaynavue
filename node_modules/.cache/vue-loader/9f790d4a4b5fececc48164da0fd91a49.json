{"remainingRequest":"/Users/wahyu/Desktop/shayna/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wahyu/Desktop/shayna/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wahyu/Desktop/shayna/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wahyu/Desktop/shayna/src/views/Product.vue?vue&type=template&id=35171425&","dependencies":[{"path":"/Users/wahyu/Desktop/shayna/src/views/Product.vue","mtime":1609489463297},{"path":"/Users/wahyu/Desktop/shayna/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wahyu/Desktop/shayna/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/wahyu/Desktop/shayna/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wahyu/Desktop/shayna/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}